use std::str::FromStr;

use nom::branch::alt;
use nom::bytes::complete::{tag, take, take_while, take_while1};
use nom::character::complete::{digit1, multispace1, one_of, char};
use nom::combinator::{map, map_res};
use nom::IResult;
use nom::multi::{many1, separated_list0};
use nom::sequence::delimited;

#[derive(Debug)]
enum ExpressionPart {
    Val(Value),
    Op(Operator),
}

impl ExpressionPart {
    fn force_value(&self) -> &Value {
        if let Self::Val(value) = self { value } else { panic!("Not a value node") }
    }
    fn force_operator(&self) -> Operator {
        if let Self::Op(operator) = self { *operator } else { panic!("Not an operator node") }
    }
}

#[derive(Debug)]
enum Value {
    Simple(i64),
    Parenthesis(Box<Expression>),
}

impl Value {
    fn numeric<F: Fn(&[ExpressionPart]) -> i64>(&self, eval: F) -> i64 {
        match self {
            Value::Simple(v) => *v,
            Value::Parenthesis(expr) => eval(expr.parts.as_slice())
        }
    }
}

#[derive(Debug)]
struct Expression {
    parts: Vec<ExpressionPart>
}

#[derive(Debug, Copy, Clone)]
enum Operator {
    ADD,
    TIMES,
}

fn problem(input: &[u8])-> IResult<&[u8], Vec<Expression>> {
    separated_list0(char('\n'), expression)(input)
}

fn expression(input: &[u8]) -> IResult<&[u8], Expression> {
    let (input, first) = value(input)?;
    let (input, suffix) = many1(op_value)(input)?;
    let mut parts = Vec::with_capacity(1 + 2 * suffix.len());
    parts.push(ExpressionPart::Val(first));
    for (op, v) in suffix {
        parts.push(ExpressionPart::Op(op));
        parts.push(ExpressionPart::Val(v));
    }
    Ok((input, Expression { parts }))
}

fn op_value(input: &[u8]) -> IResult<&[u8], (Operator, Value)> {
    let (input, operator) = operator(input)?;
    let (input, value) = value(input)?;

    Ok((input, (operator, value)))
}

fn value(input: &[u8]) -> IResult<&[u8], Value> {
    alt((parenthesis, number))(input)
}

fn parenthesis(input: &[u8]) -> IResult<&[u8], Value> {
    map(
        delimited(tag(b"("), expression, tag(b")")),
        |expr| Value::Parenthesis(Box::new(expr)),
    )(input)
}


fn number(input: &[u8]) -> IResult<&[u8], Value> {
    map(
        map_res(digit1, |s| i64::from_str(&String::from_utf8_lossy(s))),
        |i| Value::Simple(i),
    )(input)
}

fn operator(input: &[u8]) -> IResult<&[u8], Operator> {
    map(
        delimited(multispace1, one_of("+*"), multispace1),
        |next| match next {
            '+' => Operator::ADD,
            '*' => Operator::TIMES,
            _ => unreachable!()
        },
    )(input)
}

fn evaluate_simple(expr: &[ExpressionPart]) -> i64 {
    let mut result = expr[0].force_value().numeric(evaluate_simple);
    for i in (1..expr.len()).step_by(2) {
        let op = expr[i].force_operator();
        let value = expr[i + 1].force_value();
        let value = value.numeric(evaluate_simple);
        result = match op {
            Operator::ADD => result + value,
            Operator::TIMES => result * value,
        }
    }

    result
}

fn evaluate_twisted(parts: &[ExpressionPart]) -> i64 {
    parts.split(|ep| match ep {
        ExpressionPart::Op(Operator::TIMES) => true,
        _ => false
    }).map(|slice| {
        let mut value = slice[0].force_value().numeric(evaluate_twisted);
        for i in (2..slice.len()).step_by(2) {
            value += slice[i].force_value().numeric(evaluate_twisted)
        }
        value
    }).product()
}

pub fn solve(input: &str) {
    let (_, parsed) = problem(input.as_bytes()).unwrap();
    let result: i64 = parsed.iter().map(|expr|{
        evaluate_twisted(&expr.parts)
    }).sum();
    println!("Result: {}", result)
}

pub const INPUT: &str = "((8 + 6 + 4 + 9 * 2 + 9) * 8 + 2 * (7 + 2 + 4 * 2 + 4) * 2 * 5) * 3
3 * 8 * 2 + 9 * ((6 + 5 * 3) * 7 * 9 * 7 * 7) * (7 * 4 + 5 + 8 * 8)
9 + (5 * 5 + 2 + (5 * 2 + 6 * 9 * 3 + 6) * 4) + 3 * 5
6 + (8 * 5 * 3 + 9 + 3 * 4) + 9 + 3 * 3
(8 + 8 * 4 + 3 + 6) + (4 + 3 * 7 + 7 + 4 + 2) + 7 + (3 + (2 * 8 + 7 + 7) * 7 + 5 * (3 * 2 + 9 + 2 + 8 + 7) * (4 + 2 + 8))
7 + 6 + (9 * 8 * 7 * 3) + (4 + 5 * (2 * 8 * 2 * 5 + 4) + (2 + 8 + 4 * 3 + 3) * (6 * 6 * 7 + 4 * 2 * 7)) * 6 + 9
9 + 7 * ((8 * 3 * 4 * 4 + 8) + 2 * 8 + 6 * 4)
(4 + 6 + (4 * 4 + 2 * 7 + 3) * 7) * 6 * (8 + (7 * 7) + 3)
(8 + 5 * (4 * 5 + 9) * (3 + 3 + 9 * 6) * 8 + 8) * 9
5 * 4 * 8 * (4 * 2 + 2 * 3 + 6 + (3 * 6 * 9 * 9 * 8)) + 4
2 + 4 + ((2 * 3 * 4 * 7 * 3) + 5) + 4
(6 * 9 + 2 * 9) + 4
3 + 9 + 2 + (8 + 2 * 8 * 4 * 9) + 2 * 6
9 + (3 + 6 + (3 * 6 * 5 * 2 + 5)) * (9 * 7 * 4 * 6 * 2) + 4 + (7 + 7 + 8 + 5 * 8) * (4 * (3 * 5 + 2))
(8 * (7 + 4) + 8) * 6
(8 * 3 + (4 * 8 + 9 + 6) * 2) * 4 * (5 * 2 * (9 + 8 * 3 * 2 * 7 + 2) + 3)
(3 + 9 + 2) * 2 + 9 + 4 * 8 * 5
9 + (2 + 7 * 7 * (4 * 3 * 6) * 2) + 6
((6 * 3) + (9 * 9 + 5 + 2) + 4 + 9 + 8 * (8 * 3 + 5 * 7 + 5)) * 4 * 2 * 4 + 3 * 2
9 * 4 + 9 * (4 * 9 + 7) + 2
(3 + 6 + 4) + 4 + 8 + 9 * (6 + 4 * (2 + 6 + 6)) * 6
(5 + 8 * 9 * (7 + 3 + 4 + 2) * 3 + (3 + 4 + 7 + 9)) * 4 + (7 + 6) * 3 + 3
7 * 3 + 8 + 3 * (2 + 2) + ((7 * 2) * 5)
5 * 5 * 7 * (3 * 6 + 9 + 7)
7 * 7 + 4
4 + 9 * (8 + 6) * 2
(8 * 3 * 8 + 3 + 4 + 5) * 4 * 5 * 6 + (2 + 5 * 4 + 6 * 3)
((2 + 4 * 9 + 4 * 9 * 7) + (9 * 5)) + 2 + 7 * (2 * 6) + (4 + 3)
5 * 5 + (2 * 9 * (4 * 2 + 4 + 9) * (5 * 4) * 2 * 4)
(8 + 2 * 3 + 7 * (6 + 9) * 6) + 5 + (4 * 2 * 3 + 8 + 5) + 8 * 6 * 6
6 + (7 * (8 + 7 + 2 * 2) * 8 * 5 * 7 + 3) + (9 + 9) + (6 + 8)
9 + ((5 + 8) * (5 + 5 + 8) + 7)
2 * 7 + (7 + 4 * (9 + 2 * 5 * 2)) + (9 + (7 + 9) * 6 + 8) * 7 + 4
4 * 3 * 9 * 8 * (6 + 8 * 3 * 2 + 7 + 6) * 4
(9 + 6 + 8) * 8 * 5 + ((5 + 4 * 5 * 5) * 6 + 3 + 6 * 6 * 4)
((3 + 7 * 7 * 3) * 9 * (9 * 6 + 7 + 6 * 8 + 3) + 7) + 4 + 3 + 2 + 7
5 + 8 * ((4 + 6 + 8 * 9 * 3 + 9) + (4 * 7 + 5 * 3 * 3) + 9) * 2 * 9
2 * (8 * 5 * 2 * 5) * 6 + (4 * (9 * 3 + 9) * 4 * 6)
4 * 6 + 4 + (5 * 6 + (9 * 3 + 2 + 3 + 6) + 3 + 9 + 7)
(5 + 3 + 7 + 7 + 7) + 7 * 3 + 2 * 4
(3 * 2 * 9) + (4 * 8 * 9)
7 + 4 * 6 * (7 + 6 * 3 + (9 * 7 * 6 + 8 * 6 + 2) * 3 + 9)
8 + 6 + (3 + 7) * (4 * 8 * 2) + 8
6 + (3 * 7 + 4) * 8 + 3 + (3 + 6 * 4 + 3) + (2 + 9 + 9 + 3)
4 * 8 * 7 * (7 * 3 * 7)
(4 + (4 * 4 * 8 * 5) * (4 * 2 + 8 * 7)) * ((5 * 3 * 7 + 2 + 9) + 7) * 4 + 6 + 5 * 9
5 * 7 + 9 + (2 * 9 + 6 + 9 + (6 * 6 + 5 * 4 + 3) + (2 + 7 + 7)) + 9 + (8 + 3 * 3 + 7 * 7 + 6)
9 * 4 * (7 * 8 + 5 * 3) * (2 + 7 * 8 + 4 + 8) * 9
(7 * (2 * 8 + 3 * 3 + 2) * 5) + ((4 * 4 * 3 * 2) * (4 + 3 * 3 + 5 * 8) + (5 + 6) + 4 * 2) + (3 * 3 * 3) * 2
((4 * 7 + 9 * 6 * 7) * (6 + 2) + 4) * 5 + 6 * 4 + 2
2 * 2 * (4 * (6 * 5 + 5 * 6 * 5) + 5 * 6)
2 * 4 + (3 * (6 + 5) + 5 + 2) + 6 * 3
6 * 2 + 9 * (4 + 6 * 7 + 6 * 7 + 7) * 2 + 5
2 * 2 * 9 * (5 * 5 * 9 * 7 * (7 + 5 * 6 * 7 + 7 * 9) + 2)
3 + 7 + 7 + (9 * 4 + 5 + 2) * 2
((7 * 4) * 9 * 4 + 9 + 4 + (8 * 4 + 6 + 2)) + 2 * 5 + 8 + 6 * 5
6 * 7 + (7 * (3 * 4 * 9 * 5 * 7) * 4) + (7 + 8) * 6 * 7
(7 + 4 + 8 + 6 + 3) + 8 * 7 * 4 * 6 + 5
(4 + 4 + 3) * (6 * (7 * 8)) + 9 + (8 * (6 + 2) * 9 + 3)
6 * (7 * 2 + 4 * (5 * 9 + 3) * 3 * (8 * 2 + 6 + 6 * 9)) + 3
8 * 7 + 8 + 3 + (7 + 7 * 3)
((2 + 9 * 5) + 6 + 8) * 8
8 + 2 * (3 * 6 * (7 * 7 * 8) + (9 * 5) * 3 * 4) * 6 + 4
(4 + 7 * (4 * 9) + 4) + 7 * 5 * (7 * (4 * 5 + 2) * 9 + 6 * 7 * (6 * 8)) * 5 + (5 + (3 * 6 + 3 * 3 * 7))
(3 + (3 * 8 + 2 * 3 + 7)) * 5 * 6 * 8 * 8
7 + 5 * (7 + 4 * 5 * 7) + 3 + 9 * 5
((7 + 8 * 3 * 7 * 9) + 5 * 3 + 9 + (9 * 9)) + 6 + (2 + 7 * (7 * 5 + 4 * 7 * 3) + (5 * 7)) * 2 * 4 + 7
6 + 9 * (5 * 7) + 9 * 7
5 + ((8 + 4 * 9 + 3) * (4 + 5 + 6 * 4) * (7 * 2 * 8 + 6) + (8 + 7 * 7 + 9)) * (2 + 8 + 4 + 7) + 5 + 4 + (6 * (6 + 4 * 4))
5 * (9 * (4 + 3 + 4 * 2 + 5 + 5) + (2 * 9 + 3) * 9 + 8) + 6
8 * 6 * 9 + 9 + (3 + 7 + (7 * 7) + (5 + 8 + 5 + 5 * 5)) + 3
4 + 7 * (4 + 9 + 6 + 7 * 9) + (3 * (2 * 8 * 8 + 2 * 7 * 6) * 4 * 6) * 3
2 + 8 + 9 + 5 + 6 * (8 + 3 + (7 + 8 * 2) + 2)
7 + 6 * (6 + 3 * 6 + 2 + 8) * 9 + 9
3 * 6
(9 * 7 * (4 + 6) * 5 + 8) + 4 * 5 + 5 * (2 + 9) + 3
7 * 3 + 3 * 6 * 6 + ((8 + 6 * 4 + 5 * 4 * 7) + (5 * 7) * 6 * (4 + 2 + 8 + 5) + 6 * 3)
7 * 8 + (4 * 3 * 2 * 9) * 6 * (6 * (9 + 7)) + 8
5 + 5 + 6 + 8 + (2 * 5 + 4 * 6 * 7) + (6 + 9 + 8 + 9 + 7 + 7)
2 + (7 * (6 + 9 + 2 * 4)) * 7 * 6
3 + 7 * 3 * (3 + (5 * 6) + 6)
5 * (6 + 2) + 6 * 3 * 7 * 5
2 + ((5 + 6 + 9) + 2 + 6 + 4 + 7) + 2 * 5 + 4 + 6
(6 * 7 * 4 + 2) * 5 * 8 * 3 + 9
4 * (8 * 6 + 2 * (7 * 2 * 9 * 9)) * 8 * 6 + 3
7 * (4 * 9) * 7 * 9 + (4 * 9 * (5 * 7)) * 8
(6 + 6) * 4 + 6
9 * (4 * 6 + (2 * 7) * (4 * 5) + 7) * 7
(8 + (6 + 9 * 8 * 2 * 2)) * 6 + 7 * 9
6 + 7 + 4 * 6 * 2 + (5 + 4 * 3 + (4 * 4 * 8 + 2 * 3 + 9) + (3 * 4 * 9 + 3 * 4) * 2)
(8 + 5 + 7) + 6
8 * (5 * 4 * 5) + 7 + (9 + (9 * 3 + 2 + 2 + 5 + 7) + 2 + 7) * (6 + (5 * 5 + 6 + 6 * 2) + 2) * 9
5 * 2 + 9 + (3 + (3 + 3)) + (4 * 3) * (3 + 3 * (5 + 3 * 5 + 5 * 3))
2 * 8 + 4 * (2 + 6 + (6 * 8 * 8) * 7) + 3
(7 + 8 * 4 + 6) * (9 * 5 + (9 + 6 * 2 + 2) + 6) * 7 + 4
(8 * (3 + 3 * 8)) * (4 * (7 * 6 * 2 + 9 + 8) + (8 * 5 * 5 + 8) * 5) + 8 + 7
(4 + 4) * 7 + 7 + 9 * 2 + 4
6 * 5 * 3 * 4 + ((6 + 7) * 6 + 2) * 2
3 * ((7 + 4 + 6 * 9 + 6 * 8) * 5 * 4)
2 * (9 * 3 * (2 * 8 * 7 + 3 + 8) + 5 + 5) + 8
4 + 8 * 5 * 4 * 3 + (2 * 3 + 8 + 7 * 6)
2 + 3 * ((3 + 4 * 6 + 6 + 8) * 2) * ((3 * 5 * 5) + 7 * (5 * 6 * 3 + 6) * 2 + (4 + 5 * 7) + 2) + 9 * 6
3 * (9 * (9 + 9 * 6 * 8) * (3 + 7 * 5 * 7)) * 7 * 4 + 2 + 9
4 + 6 * 5 + ((3 + 7 + 6 * 6 + 5 + 6) + 4 + 2 * 6 + 4 * 3) * 4 + 2
2 * 9 + 2
4 + 7 * (4 + 3 + (4 + 7) * (4 * 2))
(8 + (7 * 4 * 8 * 2 * 4 * 6) + 6 * 5 + 9 * 3) + 2
4 + 2 * (6 * 6 * (8 + 7 + 2 * 2 + 4 * 6) + 3 * 7)
7 * 9 * 9 * 5
(8 * 2 * (6 * 5 + 6 * 9 * 5 * 3) + 7) + 7 * 2 + 5
6 + (4 * 6 * 5 * 9) + 8 + ((3 * 7 + 5 * 2 * 2 + 5) * (6 * 5 * 9 * 5) * 8)
(3 + (3 * 2) + 8 + 7) * 4
(7 * 3 * 4 * 6 + 7 * 3) * 6 * 4 * 7
3 * (3 + 4 * 4 + 9 * 7 * 8) * 9 * (4 + 3 * 8 + (7 * 7 * 4 * 4 * 2))
9 * 6 + 4 + 6
4 * 7 * ((8 * 3) + 3 * 7) * 7
5 + (4 * 5 * 4 + 8) * 8 + 5 * 2 + 7
3 + ((5 + 7 + 7 * 2) * 4 * 2 * 5 + (3 * 9 * 5 + 7) + (7 + 3)) + ((9 + 4 + 6) * 9 + 3 + 3 + 9 + (2 * 9 + 8))
3 * 6 * 4 * (4 * 7 + 6 + 4) + (4 * 5 + (7 + 6 + 3 + 8 * 5 + 2))
6 + (4 + 5 * 7) * (8 + 2) + 2 + 4 * 8
(6 * (4 + 2) * 2 * 8 + 9) * 5 * 5 * 5 * 2 + 2
3 + 2 + 6 * 8 + 2 * ((3 + 3) + 4)
(4 * 7 + 2 * 9 * (8 + 9 + 2) + (7 * 5 + 4 + 6)) * 9
9 + 4 + (3 + 5 + (6 * 9) + 6) + 8 + 3
3 * (7 + 3 + 9) * (7 * 4 * 4 + 6 + 5) * 2 + 2 * (6 + 9)
3 * ((3 * 9 * 4 + 9) + 9 * (7 + 7 * 5 + 8 + 8 * 7) + (2 * 4 + 7 + 5 + 6) * (2 * 4) * 8) * 5
7 + 3 * (7 + 3 + 8 * 7 * 3 * 5)
8 + ((6 + 2 + 8 * 4) * 8 * 5) + 6 + 7
2 + 8 + 3 * 9 + 8 * 3
(3 + 2 + 5 * 8 + (4 * 7 + 2 * 4) + 3) + 2 * (5 * 7 + 7 * 6) + 2 + 9
2 + 7 + (3 + 6) * 5 * (2 + 5 + 6 * 9)
4 * 4 + 5
(9 + 3) * 3 + 9 * 3
(9 + 8 + 2) * (9 * (4 + 3 + 9 + 3))
7 * 7 + 8 * 9 * 2
9 + 3 * 7 + 8 * 9
(8 + 9) + 2
3 * ((6 * 6 * 9) + 5 + 2 * 8 * 6 + (5 * 2 * 5 * 6 * 4)) + 5
5 * ((8 * 5) * 8 + 4 * (9 + 6 * 6 * 4 + 9)) + (4 * 6 * 5 + 5 * 3) + 3 * 2 + 3
6 * (8 * 9) + ((7 * 4 * 7 + 6 * 8 + 3) * (2 + 9 + 7) + 5 + 6) * 5 + 9 * 7
5 + 9 * 3 * 3 * (4 * 4)
9 * ((8 + 5 + 2) + (4 + 4) + 8) + ((8 + 6 * 9 * 2 + 2 + 6) * 9 * 8 * 7 * 9) + 9 + 3 * 7
8 * 2 + 3 * 4 + ((4 + 4 * 4 + 6 * 8 * 5) + (8 * 2 + 6 + 4))
7 + 5 + 7 + (3 * (9 * 7 * 8) * 6 * 3 + (5 + 8 * 8 + 2)) * (9 * 7 * (4 * 6 + 4 + 7 + 7 * 7) * (5 * 3 + 8) + 7) * 6
(2 + (6 * 2 + 5 * 8 * 2) * 7 + (2 * 8)) * 9 * (2 * 5)
3 * (5 * 4 * 9 * 7) + 2 + 2 * 9 * (6 + 8 * 6 * 5 + 4 * 2)
(2 * (6 + 9 * 4) * 8 * 8 + 5 + (7 * 9)) + 4 * 9 * 9
3 + (3 * 3 + 2)
7 + 9 * 2 + (5 * 3 + 8 + (2 + 5 + 9 * 7 * 5))
2 * (8 * 4 * 7 + 2 * 6 * 8)
3 * 9 * (4 * (3 * 9 + 3 * 7 + 9 + 8)) * 8 * (2 * 6)
6 * 7
9 * 5 + (7 * 4 * 2 + (7 * 9 * 9 + 9 * 8) * 8 * 5) * 8
((2 + 2 * 8) + 8 * (9 * 9 + 7 * 7 + 4 + 5) + 3) + 4
7 + 7 + 5 * (4 + 3 * 9) + 7 + 8
4 * 4 + (4 * 5 + 7 * 9 * 3) * 5
(9 * 4 * 7 * (7 + 7 + 6) * 3 + (9 + 4 + 5 * 8 * 4)) + 2 * 5 + ((6 + 6 + 9 * 3) * 8 * 2)
8 + (8 + 3 * (3 + 4) + 8) + 4
((3 * 8 * 3 + 8 * 2) * 9 + 3 * 5) * 4 * (5 * 4 + 3 * 3 + 4) + 2 + 9
5 * 6 + 4 * 6
(4 * 7) + 2 * (9 + (9 * 7 + 2 + 6) + 6) + 4
8 * (9 + 7 * 9) + 4 + 2 + 6 * 7
(8 + 9 * (3 + 7 + 2 * 6 * 7 + 6) + (3 * 3 + 4 + 8 * 4) * 3 * 3) * 5 * 7 + 7 + (8 + 7)
6 * (8 + 8 * 5 * (5 * 5 + 3 * 9 + 8) + 6) + (7 + 8 * 7)
(2 * (5 + 6 + 5) * 9 + (6 * 5 + 4) * 3 + 8) * 4 * (6 + 8 * 4 + 5) + 6 + 9 * 9
(9 + 5 * 5) * 2 * 5 + 8
3 + ((6 * 9 * 7 + 4 * 2 * 6) + 5 * (8 * 3 * 3 + 6))
6 * 6 + (5 * 6)
(6 * (8 * 9 + 3) * (2 + 7) + 5) * 7 * 8 * 8 * 2 * 9
2 + 5 + (5 * 4 * 6) + (5 + 2)
8 + 9 + 8 * 9 + (8 * 8 * 3 + 7)
7 * 7 + 9 * ((9 + 9) * (4 + 5 * 7 * 7 + 5) + 4) * 3 + (5 * (2 * 5 * 8 + 2) * 2 + 6 + 2)
8 * ((7 * 8) * 2 + 3 + 3 * 6)
4 + (2 + 9) + 9 * (9 * 7 + 3 + 6 * 6 * 4) * 8
5 * 5 * 6 * 3 * ((7 + 8 + 6 + 7) + 2 * 8 + 5 + 6 * 9)
(9 * 4) + 2 * 2 * (2 * 9 * 8 + 5)
8 * ((5 * 5 + 9 + 6 * 4 + 3) + 7 + 9 * 4 + (8 + 4 + 8 + 6 + 9) + 2) + 2 + 8
9 * 9 * (3 * 3 * 5) * 7
6 + (4 * 3) * 2 + 3 * ((8 + 6 * 9) * (7 * 7))
6 * 8 + 2 * 6 + 8 + 2
((4 + 4 * 2 * 5 * 9 * 6) + 4) * ((2 + 7) + 3 + 4) + 4 + (8 * (5 * 8 + 2 + 8)) * 5 + 3
((9 + 4 + 9) * 2 + 3 * 5 + 5 * 6) + 8
8 * (4 * (5 * 2 + 4 * 4 * 5) * 9 * 4 * 9) * (8 + (4 * 4 + 7 * 9 + 8) + 8 + 4) * (9 + 9) + 3
(5 + (6 * 6 * 7 * 4 + 7) * 4 * 3) * 3
(6 * 5) + 5 + 8 * (7 + 2 + 6 + 4 * 8) + 2
4 * 8 * (7 + 7 * (7 * 6) * 2) * 4 * 3 * ((9 * 2 * 2 * 6 * 2) + 5 + 9 + 8)
(9 + 9 * 4 * 9 * 9 + 2) * 3 + 2
3 + (3 * 7 + 9 * 2) + (5 + (5 + 8) + 6)
8 + 3 * (7 + (8 * 9) * 4 + 8 + 6)
5 + 5 + (8 + 6) + (5 + 9 + 8) + 7 + (9 * (6 * 4 + 7 + 9 + 3) + 4)
7 * 5 + 3
4 + 6 * (6 * 3 + (5 * 2 + 6 + 2) * 2)
9 + (3 + 2 + 4 + 5 * 7)
(7 + 5 * 6) + (3 + 6) * (5 * 7 * 8 + 5 * 7 + 4) + 3
6 + 9 + (5 + 7 * 2)
6 + (9 + 6) + 4 + (6 + 3 + (6 * 5 + 2 * 9 + 4) * 3 + 3 * 7) * (6 + (6 * 2 * 7))
4 + (2 * 4 + 4 + (7 + 7 + 4 * 7 + 9 * 5)) + (8 * 3) + 9
(9 + (8 * 5 * 5 * 2 + 4) + 6 * 2 * 9) * 9 + 4 * 6 + 7 + 2
8 + 3 + 9 * (8 * 4 * (8 + 6) + 7 * 2 + 8)
8 * 8 + 4 + (3 * (8 + 7) + 5 + 3 * (2 * 4 * 8 + 2) * (9 + 5 + 3 * 9 + 7 + 9)) + 9
7 * (3 * 4) + 2 * ((5 + 3 + 6 * 2 + 9 * 2) + 2 * 4 + 6 + 7 + 3) + 3 + 2
(8 * 8 * 4 + 3 * (2 + 8 * 3 * 5 * 7) + 4) * 9 + 8
2 * (7 * 9 * (4 + 4 + 7 * 7 + 6 * 7)) + (7 + 9 + 8 + 4 * 2 * 9) + 7 * 8
(4 + 5 * (3 + 6 * 8 + 7 * 7) * 8 + 2) * 5
9 * 5 * 2 + (7 + (9 * 8 * 3 + 9 + 4) * 9)
6 + 2 + 2 + 6 * (2 + 5 + 9 + 5) + 3
4 * 2 * (4 + (6 * 4) + 4 + 6 + 5) + 2 + 3 + 4
8 * (9 + 7) + 2 + 4
((7 * 9 + 6 * 5) * 5 + 9) + 3 * 6 + (2 + 5) + (7 + (7 + 4 * 3 + 7) + 2 + (5 * 4) + 8)
(8 + 2 + 3) * (8 + 9 + (3 + 6) + 7) + 8 + 6 + (9 * 7 * 6 * (5 * 6 + 6 * 2 * 2 + 9) + 2 + 5) + 6
6 + (4 * (4 + 6 * 3 * 5 + 7) * 7)
7 + (3 + 3 + 9 * (9 * 9) * 8) * 6 * 3
4 * 2 + (4 * 2 * (3 + 9 * 7 + 3 + 9) + 6 + 8) * 8 + 5 + 7
4 + (9 + 2 * 7 + 7 + 2) * 4 + 6 + 3 * 5
3 * (9 + 7 * 7 * 6)
6 + (7 * 3 + 4) * (7 + 7 * 5 + (8 * 6))
8 * (2 * 7) * 8 + 2 * 8
5 + (8 * 6)
2 * 6 * (9 * 7 + 8) * 7 + (4 * 2 + (9 * 4 + 2 + 2 + 5) * 6)
(3 * 6 * 9 + 9 + 8 + 2) + 7
((3 + 8) + 6) + 6
((2 + 4 * 4) * 6) + (5 + (9 * 2 + 4 * 5 + 8 + 4) * (4 + 4 + 8 * 8)) * 6
3 * 3 * (7 * 2 + 9 * 2 + 8 + (4 + 4))
(5 + 9 + 5 + (3 + 5 * 5)) * 5 + (9 * (6 + 8 + 6) * 6 * 7)
2 + (4 * 7 * 3) + 9 * 5
8 + 9 + 3 * 6 + 6 + (4 + 8 + (7 * 3 * 7 * 6 * 7 * 7) + 9 * 2)
2 + 5 + (4 + (6 * 6 * 9) + 4 * 3) * 2
(5 + 6 + 6 * 8 * 9) + 9
5 * 7 + 4 * 9 + 4
(3 + 4 + (8 + 9 + 4 * 3) + (4 * 3) + (9 + 6 * 4 * 6 * 6 + 7) + 2) + (4 + 4 * 9 * 4 * 3) + 2 * 9
7 * 3 * 8
(3 + (3 * 8 * 2 + 5) + (3 + 3 * 6 + 7 * 8) + 9 + 6) * 5 * 6 * 2
8 + 9 + (5 * 3) * (6 + 6 + 7 * 2) * 8
5 + 2 + (8 * 4 + 3 * (6 + 6 * 5 * 3 * 6) + 6) * ((8 + 3 + 6 * 6) * (3 * 2 * 3 * 6)) * 5
(8 + 7) * 3 + (7 * 8 + 4 * 5 + 4) + (9 + 9 + 3 + (9 * 8 + 9) * 6 * 9)
(4 * (3 * 6) + 8) * (6 * 2)
(5 + 5) * 7 + 7 + (4 + 9 * 4 + 2) * 9
6 * 2 * (5 + 2 * (4 * 8 + 6 + 5 + 3) + 6 + 2 + (5 + 9 + 9 * 7 + 6)) * 4 * (7 + 6 * 9 * 8 + 2 + 4) * 3
(6 * (5 + 4 + 8 * 6 * 7 + 5) + 5 + 7 + 9 * 2) + 2 + (3 * (7 * 2 + 8) * 5 + 8 * 5 * 6) + (2 + (4 + 2 * 4 * 3))
6 + 3 + (4 * 2 * 3 * 6 * 3 + 9) * 6 + 8
5 * 5 * (4 * 6 * 8 + (2 * 3 * 7 + 4 * 6)) * 7 + 4 * 4
4 + 6 + 3 * 2 * (4 + 4 * 6 + 5 * 3) + 5
3 + 4 + 4 * 3 + 6 + (3 * 4 * 3)
8 + 7 + (6 + 3 * 3 + 2 * (8 + 7 * 2 + 6 + 8) + 5) + 2 + (8 * 7 + 2) * 2
7 * 7 + 6 + 9 * 7 * 6
6 + 7 + ((5 + 7 * 5 * 9) * 5 + 3) + 6
6 + (6 + 3 + 6) * 7 * (6 + 8 * 7 + 9 + 4) * ((4 + 9 + 5 + 9) + 2 + 9 * 7 * 6 + 7) + 7
(3 + 9 * 7 * 3) * 6 + 6 * 2
5 * 7 + (6 + 7 * 5 * 5 * (9 + 9 * 2 + 8 * 5 * 6)) * 8 * 8 + (9 * (8 * 3 * 7 * 6 + 2 + 2) * 9 + 6 * 4)
3 + ((9 * 5 * 6) + 2 + (9 + 8 * 4 + 9 + 6) + 9 * 8 + 5) + 4 + (3 + 8 * (7 * 5 * 7 * 2 + 5) * (7 + 5 * 5 + 6 * 5 + 5) * 9)
(9 + 2) * 8 * 3 + (3 + 8)
7 + (6 + 2 + 8 * 8 * 3) + 6 + 5 + 6
(4 + 9 + 4 * 4 + 4) * 9 + ((8 + 9) * 6 * (4 * 5) + (8 + 8 + 7 + 2 * 8) * (5 + 7 + 8)) + 9 + (6 + 6 * 9 + 8 + 5 + 5)
(9 + 9 * 7 + (8 * 4 + 5)) * (2 + 3 * 5 + (4 + 4)) * (9 * (5 * 6 * 2 + 7 * 3 + 5) * 7 + (3 + 9 + 3) * (4 + 2 * 9 * 6 + 5)) + (3 * 6) + 5 + (5 * 4 + 6 + 8)
((2 + 5 + 7 * 9) + 7 * 7 + 3 * 6) + (9 + 6 + (7 * 9 + 8 * 7) + 6 * 4 + 7)
9 + (4 * 6 * 2 * (5 + 9 + 8 + 3 + 2 * 6))
6 * 5 * (5 * 9 + 5 + 3) + 9
(4 + 6 + 3 + 4) * (9 * 5) * 9 * 4 * 3 * (3 * 8 * 6 + 4 + 8)
((3 + 2 + 2 * 9 + 3 + 8) * 3 + 5 * 3 + 7 * 5) + 5 * 5 + ((9 * 9) + 5 + 2 * 7) + 5
9 * 7 * ((6 + 3 * 8) + 8) * 5 * 2 * 2
(9 + 2 * 5 + (9 + 6 + 3 + 2 * 7 + 9) + (3 * 5 + 7) + 5) + (9 + 6 * 9 * 3) + (4 + 5 + 8 * 2) * 3 + (6 * 4 + (8 * 2 + 5 * 2 + 7) * 2 + 7) * 3
5 * 9 + 6 * (3 + 3)
4 * 8 * 9 * 5 * 3
9 * 8 * 6 * 3 * ((2 * 4 * 6 + 8 + 7) + (6 * 8) * 3 * 5) * 5
2 + 2 * (7 * 4 * 2 * 3)
8 * (6 + 8 * 7) * 3 + 2 + 5 * ((6 * 7 * 7 * 7) * (5 + 6 + 5) * 6)
5 + (6 * 6 * 7 * 3) + 5 + 7
(5 + (6 * 8 * 5 + 6)) + 7 * 4 + 2 * 2 + 4
2 + (4 * (4 + 5 * 9 * 9) * 3)
9 + (6 + 2 * (9 + 7 * 4) + 6) * 7
6 + 9 * ((4 * 6 * 9 + 5) + 2 + (7 * 7 * 7 * 6 + 6) + (2 * 5 * 6 + 8 + 7 * 5) + 4) * 2
(9 + (7 + 5 * 4 + 3)) + 8 + 7 + 9 * 5
((6 * 2 * 4) * (4 + 7 * 2 * 6 + 7 + 3)) + 9 + 3 * 5 * 7 + 4
((3 * 8 + 8 + 8 * 9) + 4) * 7 * 8 * (9 * 6 * 3 + (8 + 7 * 9 * 9 * 7 * 6) + (6 * 2 * 4 * 9 + 9 * 9)) * 5 + 9
4 + 8 * 6 + (7 * 2 + (6 + 3 + 5 * 2 + 2) * 2 * 5) * 7 * 2
(4 + (8 + 5 + 3 + 7 + 7 * 5) * 8) + (4 + 6 + 7 * (3 * 8 * 6) * (4 * 4))
(6 + 2 + 2 * (7 * 3 + 9 * 7 + 2)) + 3 + 5 + (4 + 9 * 8 * 7) * 3 * (7 * 4 * 2 + 7)
8 * 8
(8 * 5 + (3 + 2) * 9 + 9 + 3) * 5 + 4
(4 * 6 + 3) * 5 + (9 * 5 * 7 + 5 * (7 + 6 * 4 + 6) + 4)
(9 + 3 + (8 * 2) * 7 + 7) * 4 * 6 + 7
(6 * 3 + (2 * 6 + 2) + (7 + 7 + 3 * 7 * 6) + 6 + 2) + (6 * 3 * 5)
6 * 5 * (2 * 5 + 9 * (4 + 2 * 6 * 4 + 5 * 2) + 5) + 6 + (4 + (3 + 2 + 2 * 5 * 2) + 8 + 5 * 2 + 5)
((5 + 9 + 2 + 7 + 4 * 9) * 9 * 3 + 8 + 2 * 8) + ((7 * 5 + 7 + 3 * 7) * 8 + 2) + 5 + (5 + 8 + 4 + 6) * (5 + 8 + 2)
5 + 3 + (9 + 4 + 6) * 8 + 8
2 + (2 * 4 + 7 + 9) * (7 * 4 * (2 * 5 + 2) + 3) + 8 * 6
7 + (2 + (5 * 7 + 8 * 4 * 5) * 9 + 8 * (3 * 3)) * (6 + 6 * 2 + 4) * 9
((9 * 5 * 7 + 4 + 8 + 9) + 9 + 4 + (8 + 4 * 8 + 6 * 7 * 3)) * 2
5 + (5 + 6 + 7 + 5 * 8 * 6) + 5
(4 * 5 + 8 + 5) * (8 + 2 + 8 + 4 + 4) + 6
5 + 4 * 8 + 7 + 4 * 4
3 * 7 + 3 + 9 * 7 * (6 * 2 * 8 + (2 + 2 + 4))
8 + 9 + 4 + (8 + 7 + 5 + (6 + 8 + 4 + 4 * 3 * 6) * (3 + 3 * 4 * 5) * 9)
4 + (4 + 9 * 3 * (4 + 6 * 5 * 8 * 7)) + ((8 + 6 * 2) + 8 + 5 + 8) * ((2 + 9 + 8 * 5 + 3) + 5 + 5) * 3
3 * (7 + 5 + 3 + 7 * 5) + (7 + 6 + 2 * 8 + (3 * 7 + 2) + 6)
(2 + 6 + 9) * 9 * 3
8 + (2 + 2) + 2
5 + (7 * 2 * 6 + 3) + 4 + 7 * 7 + (9 * 5 * 8 * (3 * 9 * 2 * 4 + 6 + 2) + 3 * 4)
9 * 6 * 8 + (3 + 9) * 6 + 4
2 * 3 * 5 + 6 + 6 * (4 * 9 + 4 * 6)
8 * 9 * 9 * ((4 + 7 + 5 + 7 + 2 + 7) * 2 + 2 + (3 + 8 + 6 * 5) * 6 * 6) + 7 + 4
(8 * 5 * 7) + (5 + 6) * 7 * (4 + 7 * (9 * 4 + 5 * 8 * 9) + 6) + 3 * 7
3 + 2 + 4 + 7 + 3
(8 + 7 + 2 * (4 * 7 + 8 + 2 * 6)) * 2 + ((6 * 5 * 5 + 8 * 7 + 3) * (4 * 5) + 3 + 6 + 6 * 8) + 7 * 3 * 5
2 * (5 * (3 * 4)) + 6 * 8 + 8
(7 + 9 + 5) + 8 * 3 + (6 + 9 * 3 + 4 + 8) * 8 * 3
7 * 9 * (3 * (7 * 4 + 9 * 8 + 9) * 7) + (7 * 7 + 5)
5 * 2 + 8 + 7
(7 + 3 * 8) + (3 + 6)
9 + 5 * 6 * 9
((5 + 5 + 7 + 6 + 8) + 5 * 7 + 8 + 5 * 8) + 6 + 6 * (9 * 4 + 8 + 7) + 8 * 2
((4 * 9 * 3 * 5 + 5) + (4 + 4 + 2) * 6 + 5 * 9 * 8) + 8 * 2 + 8 * 6 * 9
8 * ((3 + 2 + 7) * 9) + 4 * 2 + 3 * 2
3 + 9 + 6 + 2 + ((9 + 5 + 3 * 3) + 9 + 8 * 2 * 8 * (3 * 6 + 9 + 3))
4 * (7 + 8 * 4) * 7 + 7 + 8
2 * 2 + (3 * 8 + (7 * 5) + 8 * (9 + 5)) + 3 + 9 * (5 * 9 + 9 + 4 + 8)
3 * 8 + ((2 + 6 + 2 + 9 * 3 + 3) * (3 * 9 * 4 + 6 + 4) + (4 + 9) + 2 * 8 + (4 + 6 + 2 * 7 * 7))
((8 * 9 + 6 + 2 + 5 * 7) + 3 * 6 + (8 + 8) + (9 * 6 + 6) * 7) + ((6 * 9 + 8 + 8 + 7 * 9) + 5 + 4 * 4 + 2 + 7) * 8
5 * 4 * 7 + ((3 * 8 + 2) * (3 + 4 * 3) + 5) * 5 * 5
4 + 7 * 5 + 6 + 4 * (2 * 9)
(2 * 3 + 9 * 6 * 9 + 2) + 3 * ((5 * 9) * 5 * 8 + 9) + 9 * 8
((9 * 7 * 7 * 2) + 8 + 3 + (6 + 2 * 4 * 3)) + 6 + 6 + 9 + 8
8 + 3 + (5 * 5 * 3 * 8 + 4 + 4) * (8 + 7 * 8 * 6 + (2 * 4 * 6 + 5 * 6 * 4) * 9) * (3 + 4)
9 + 3 * ((2 + 8 * 5 + 7 + 8) + (5 + 3 + 5) + 6 * 6 * 4) * (7 + 5 * (5 * 9 + 3 + 6) * 2) + 9
4 * (8 + (9 * 2 + 2 + 8) * 4 + 7 + 8 * 4)
7 + 4 * (7 * (7 + 6) + (2 + 9) + (2 + 2 + 9 * 9) * 2) + 8 * 6
(5 + (3 * 4 * 2 * 7 + 4)) + 5 * (7 + 8 * 5 + 5) * 4 + 9 * 4
((4 * 7 * 3 * 4 * 2 * 2) * (6 * 3 + 4) + 4 + 6) * 4
9 * (3 * (9 + 5)) * 5 + (4 * (6 * 4 + 4))
(9 + 4 + 5 + (5 * 2 + 4) * 3) * 2 * (9 + 7 * 6 + 7) + 7 + 6
9 * ((8 + 9 * 7) * 6 * 6 * 4) + 7
6 + 8 + ((3 + 4 + 2 + 3 * 8 * 5) + 8 + 7) + 6 * 6 * 8
2 + 9 + 7 * 7 + ((6 + 8) * (6 * 5 * 5 + 8 + 8 + 5) * 8 + (2 + 7 + 8 + 2 + 9) + (8 + 6 + 7 + 5 + 9 + 8))
7 + (2 + 4 * 5 + (9 * 2 * 8 + 4)) + 2
3 + 5 * 3 + (8 + 6 * 7 + 7 + 2) + (2 + 2) * 9
(5 + 7 * 4 * 5) * 8 + 2 * 5 * 9 + 4
((7 + 6 + 8 * 9 * 3 + 8) * 8 + (2 + 4 + 7) + 3 * 2) * 5
9 * (7 + 9 * (7 * 7 * 5) + (2 * 2 * 5) + 4) + 4 * 9 + 6 * 6
((7 * 7 * 2 + 4 + 5) + (3 + 3 * 8) * 9 + 7 * (5 + 6 + 3)) * 8
9 * 8 * 7 * 9 + (3 + (4 + 2) * 8)
((9 + 7) * (9 + 5 + 7) * (5 * 9) * 5) * 6 * 8 * 6 + 7
3 * 6 * 6 + ((7 * 3 + 8 * 7 * 6 + 2) * 5 * 2 + (6 + 4) * 9)
3 * 5 + (8 * 8 + 7 + 9) + ((5 + 5 + 7) * 3) * 7
7 + (6 + 5) * 2 + ((2 * 9 * 6 * 4) * (4 + 6 * 3 * 4) + 8 + 2 * 2 * 5) * 6 + 6
(9 * 2 + 5 * 3) * 7 + (3 * 5 + 6) + 2 + 7
2 * 3 + 7 * 5 + 6 * 5
9 + ((4 + 4 * 4 * 6) + 5 * 8) * (2 + 9)
(9 + 6 * 3 * 8) * 7 * 4
7 + 3 + (5 + (7 + 2 * 8 + 3)) + (4 * 5 + (7 + 2) + 2)
(4 + 2 * 6) * 2 * (7 + 5 * 8) + 3
3 * 7 * (2 + 2 + 4 + (2 + 2 + 6 * 6 * 3) + 8 * 6)
4 * 2 + 4 * (3 + 7 * 8 + (6 + 4 + 5 + 4 + 7 + 9)) + 3
5 + ((8 + 4 * 5 * 6) + 4 * (8 * 6 * 7 + 5 * 3) + 5 * 7)
8 + (2 * (6 + 9 * 7 + 8) * (9 * 2 * 7 * 5 * 8) + 5 + 4) + 9
8 * (9 + 7 * (8 + 8) * 5 * 2) * (5 + 7 * 6 * 6 * 8 * (7 + 6 * 6)) + 3
3 * 9 * (7 * (8 * 9 * 9) + 3 * 3 * 9 + (5 * 9 + 7 + 9 * 4)) + 9
4 + 7
3 + (2 * 2 + (7 * 3) * 2) + 7 + 4 + (2 + 6 * 4 + 9 * 4 * 5)
2 * 8 + ((7 + 3 * 3 + 4) * 8 * 8 + 8 + (2 + 3 * 2 + 2 + 5) * 2) + 7 + ((9 * 5 * 2) * 7 * 8) * (4 * 7 * 8)
2 * 9 * (3 + 5 * 3) * 2 * 9 * 2
(6 * 7 * 4) * 4 + 8 + (4 * 8)
7 + 2 + (9 * 4 + 5 * 6 * 7)
6 * (6 * (9 * 7 + 4 + 8 * 7) * 2 * 8 + 6) * 7
4 * 4 + 2 + 4 * (9 * 2) + 2
2 + 7 + 6 + 3 * ((3 + 5 * 4 * 4) + 6 + 8 * 9)
7 + 4 * (3 + 4 + (3 * 5 + 4 * 2)) + 9 + (5 * 6)
(4 + 7 + 3 + (4 * 8 * 8 * 7 * 7 * 6)) * (2 * 7 * 8 + 4 * 8) + (9 + 6 * (9 * 8 * 5 + 5) + 2) + 8 * 7 * 6
(2 + 3 * 7) + (7 + 6 * 5) + 5 * (6 * (4 * 4 * 4 * 6) * 4 * (6 * 7) + 6) + 9 * 7
6 + 6 + 2 * (6 + 7 + (9 + 9 + 9 * 7 + 7 + 7) + 7 * 5)
((2 * 2 + 2 + 4 + 8 + 8) + 3 + 6 + (2 + 8 + 2 * 5 * 2)) + 7 * 7 * 2 + 6
4 + ((4 * 8 * 9) * 7 + (2 * 2 + 7 + 6 + 8 + 5) * 4 + 5 + 8) * 5 * 2
8 * (5 * 5 * 4 * (9 * 9 + 8 + 6 + 9 + 3) + 8 * 7) * 4
9 + ((9 * 3 * 4 * 2) + 6) + 8 + 4 * 9 * 7
2 * 8 * 2 * ((2 * 8 * 3 * 5) + 5 * 2 * 7 * 2) + 4
(2 + (6 + 6 + 7 + 9 + 9 + 7)) + 7 + 3 + (6 * 3 * 5 * 8) + 9 * 2
2 * 5 * 2 + 5 + 2 + ((9 + 7 + 6) + 7 + 2 + 2 * 2)
5 * 4
(3 * (9 + 5) + 3 + 4 + (7 * 6 + 6 * 6)) * 8 + (6 + 2 * 8 * (6 + 6 * 7 * 3 + 5) + 3 + 5) * 3 * 7
5 * (4 * 2) + (5 * 7 + 4 + 2) * 6 + (2 * (6 * 8 * 3 + 5) + 8) + 8
9 * 2 + (7 * 5) + 2 + (9 + 4)";
pub const EXAMPLE_INPUT: &str = "2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2";